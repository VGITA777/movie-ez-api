package com.prince.movieezapi.api.models.enums;

import java.util.Arrays;
import java.util.Map;
import java.util.stream.Collectors;

public enum Country {
    ANDORRA("AD"),
    UNITED_ARAB_EMIRATES("AE"),
    AFGHANISTAN("AF"),
    ANTIGUA_AND_BARBUDA("AG"),
    ANGUILLA("AI"),
    ALBANIA("AL"),
    ARMENIA("AM"),
    NETHERLANDS_ANTILLES("AN"),
    ANGOLA("AO"),
    ANTARCTICA("AQ"),
    ARGENTINA("AR"),
    AMERICAN_SAMOA("AS"),
    AUSTRIA("AT"),
    AUSTRALIA("AU"),
    ARUBA("AW"),
    AZERBAIJAN("AZ"),
    BOSNIA_AND_HERZEGOVINA("BA"),
    BARBADOS("BB"),
    BANGLADESH("BD"),
    BELGIUM("BE"),
    BURKINA_FASO("BF"),
    BULGARIA("BG"),
    BAHRAIN("BH"),
    BURUNDI("BI"),
    BENIN("BJ"),
    BERMUDA("BM"),
    BRUNEI_DARUSSALAM("BN"),
    BOLIVIA("BO"),
    BRAZIL("BR"),
    BAHAMAS("BS"),
    BHUTAN("BT"),
    BURMA("BU"),
    BOUVET_ISLAND("BV"),
    BOTSWANA("BW"),
    BELARUS("BY"),
    BELIZE("BZ"),
    CANADA("CA"),
    COCOS_ISLANDS("CC"),
    CONGO_KINSHASA("CD"),
    CENTRAL_AFRICAN_REPUBLIC("CF"),
    CONGO_BRAZZAVILLE("CG"),
    SWITZERLAND("CH"),
    COTE_DIVOIRE("CI"),
    COOK_ISLANDS("CK"),
    CHILE("CL"),
    CAMEROON("CM"),
    CHINA("CN"),
    COLOMBIA("CO"),
    COSTA_RICA("CR"),
    SERBIA_AND_MONTENEGRO("CS"),
    CUBA("CU"),
    CAPE_VERDE("CV"),
    CHRISTMAS_ISLAND("CX"),
    CYPRUS("CY"),
    CZECH_REPUBLIC("CZ"),
    GERMANY("DE"),
    DJIBOUTI("DJ"),
    DENMARK("DK"),
    DOMINICA("DM"),
    DOMINICAN_REPUBLIC("DO"),
    ALGERIA("DZ"),
    ECUADOR("EC"),
    ESTONIA("EE"),
    EGYPT("EG"),
    WESTERN_SAHARA("EH"),
    ERITREA("ER"),
    SPAIN("ES"),
    ETHIOPIA("ET"),
    FINLAND("FI"),
    FIJI("FJ"),
    FALKLAND_ISLANDS("FK"),
    MICRONESIA("FM"),
    FAEROE_ISLANDS("FO"),
    FRANCE("FR"),
    GABON("GA"),
    UNITED_KINGDOM("GB"),
    GRENADA("GD"),
    GEORGIA("GE"),
    FRENCH_GUIANA("GF"),
    GHANA("GH"),
    GIBRALTAR("GI"),
    GREENLAND("GL"),
    GAMBIA("GM"),
    GUINEA("GN"),
    GUADALOUPE("GP"),
    EQUATORIAL_GUINEA("GQ"),
    GREECE("GR"),
    SOUTH_GEORGIA_AND_SOUTH_SANDWICH_ISLANDS("GS"),
    GUATEMALA("GT"),
    GUAM("GU"),
    GUINEA_BISSAU("GW"),
    GUYANA("GY"),
    HONG_KONG("HK"),
    HEARD_AND_MCDONALD_ISLANDS("HM"),
    HONDURAS("HN"),
    CROATIA("HR"),
    HAITI("HT"),
    HUNGARY("HU"),
    INDONESIA("ID"),
    IRELAND("IE"),
    ISRAEL("IL"),
    INDIA("IN"),
    BRITISH_INDIAN_OCEAN_TERRITORY("IO"),
    IRAQ("IQ"),
    IRAN("IR"),
    ICELAND("IS"),
    ITALY("IT"),
    JAMAICA("JM"),
    JORDAN("JO"),
    JAPAN("JP"),
    KENYA("KE"),
    KYRGYZ_REPUBLIC("KG"),
    CAMBODIA("KH"),
    KIRIBATI("KI"),
    COMOROS("KM"),
    ST_KITTS_AND_NEVIS("KN"),
    NORTH_KOREA("KP"),
    SOUTH_KOREA("KR"),
    KUWAIT("KW"),
    CAYMAN_ISLANDS("KY"),
    KAZAKHSTAN("KZ"),
    LAOS("LA"),
    LEBANON("LB"),
    ST_LUCIA("LC"),
    LIECHTENSTEIN("LI"),
    SRI_LANKA("LK"),
    LIBERIA("LR"),
    LESOTHO("LS"),
    LITHUANIA("LT"),
    LUXEMBOURG("LU"),
    LATVIA("LV"),
    LIBYA("LY"),
    MOROCCO("MA"),
    MONACO("MC"),
    MOLDOVA("MD"),
    MONTENEGRO("ME"),
    MADAGASCAR("MG"),
    MARSHALL_ISLANDS("MH"),
    MACEDONIA("MK"),
    MALI("ML"),
    MYANMAR("MM"),
    MONGOLIA("MN"),
    MACAO("MO"),
    NORTHERN_MARIANA_ISLANDS("MP"),
    MARTINIQUE("MQ"),
    MAURITANIA("MR"),
    MONTSERRAT("MS"),
    MALTA("MT"),
    MAURITIUS("MU"),
    MALDIVES("MV"),
    MALAWI("MW"),
    MEXICO("MX"),
    MALAYSIA("MY"),
    MOZAMBIQUE("MZ"),
    NAMIBIA("NA"),
    NEW_CALEDONIA("NC"),
    NIGER("NE"),
    NORFOLK_ISLAND("NF"),
    NIGERIA("NG"),
    NICARAGUA("NI"),
    NETHERLANDS("NL"),
    NORWAY("NO"),
    NEPAL("NP"),
    NAURU("NR"),
    NIUE("NU"),
    NEW_ZEALAND("NZ"),
    OMAN("OM"),
    PANAMA("PA"),
    PERU("PE"),
    FRENCH_POLYNESIA("PF"),
    PAPUA_NEW_GUINEA("PG"),
    PHILIPPINES("PH"),
    PAKISTAN("PK"),
    POLAND("PL"),
    ST_PIERRE_AND_MIQUELON("PM"),
    PITCAIRN_ISLAND("PN"),
    PUERTO_RICO("PR"),
    PALESTINIAN_TERRITORY("PS"),
    PORTUGAL("PT"),
    PALAU("PW"),
    PARAGUAY("PY"),
    QATAR("QA"),
    REUNION("RE"),
    ROMANIA("RO"),
    SERBIA("RS"),
    RUSSIA("RU"),
    RWANDA("RW"),
    SAUDI_ARABIA("SA"),
    SOLOMON_ISLANDS("SB"),
    SEYCHELLES("SC"),
    SUDAN("SD"),
    SWEDEN("SE"),
    SINGAPORE("SG"),
    ST_HELENA("SH"),
    SLOVENIA("SI"),
    SVALBARD_AND_JAN_MAYEN_ISLANDS("SJ"),
    SLOVAKIA("SK"),
    SIERRA_LEONE("SL"),
    SAN_MARINO("SM"),
    SENEGAL("SN"),
    SOMALIA("SO"),
    SURINAME("SR"),
    SOUTH_SUDAN("SS"),
    SAO_TOME_AND_PRINCIPE("ST"),
    SOVIET_UNION("SU"),
    EL_SALVADOR("SV"),
    SYRIA("SY"),
    ESWATINI("SZ"),
    TURKS_AND_CAICOS_ISLANDS("TC"),
    CHAD("TD"),
    FRENCH_SOUTHERN_TERRITORIES("TF"),
    TOGO("TG"),
    THAILAND("TH"),
    TAJIKISTAN("TJ"),
    TOKELAU("TK"),
    TIMOR_LESTE("TL"),
    TURKMENISTAN("TM"),
    TUNISIA("TN"),
    TONGA("TO"),
    EAST_TIMOR("TP"),
    TURKEY("TR"),
    TRINIDAD_AND_TOBAGO("TT"),
    TUVALU("TV"),
    TAIWAN("TW"),
    TANZANIA("TZ"),
    UKRAINE("UA"),
    UGANDA("UG"),
    UNITED_STATES_MINOR_OUTLYING_ISLANDS("UM"),
    UNITED_STATES("US"),
    URUGUAY("UY"),
    UZBEKISTAN("UZ"),
    HOLY_SEE("VA"),
    ST_VINCENT_AND_THE_GRENADINES("VC"),
    VENEZUELA("VE"),
    BRITISH_VIRGIN_ISLANDS("VG"),
    US_VIRGIN_ISLANDS("VI"),
    VIETNAM("VN"),
    VANUATU("VU"),
    WALLIS_AND_FUTUNA_ISLANDS("WF"),
    SAMOA("WS"),
    CZECHOSLOVAKIA("XC"),
    EAST_GERMANY("XG"),
    NORTHERN_IRELAND("XI"),
    KOSOVO("XK"),
    YEMEN("YE"),
    MAYOTTE("YT"),
    YUGOSLAVIA("YU"),
    SOUTH_AFRICA("ZA"),
    ZAMBIA("ZM"),
    ZAIRE("ZR"),
    ZIMBABWE("ZW");

    private static final Map<String, Country> ISO_TO_COUNTRIES_MAP = Arrays.stream(Country.values()).collect(
            Collectors.toMap(Country::getIsoCode, country -> country)
    );

    private final String isoCode;

    Country(String isoCode) {
        this.isoCode = isoCode;
    }

    public static Country fromIsoCode(String code) {
        if (code == null || code.isEmpty()) {
            return null;
        }
        return ISO_TO_COUNTRIES_MAP.get(code.toUpperCase());
    }

    public static Country fromValue(String value) {
        if (value == null || value.isEmpty()) {
            return null;
        }

        if (value.length() == 2) {
            return fromIsoCode(value);
        }

        try {
            return Country.valueOf(value.toUpperCase());
        } catch (Exception e) {
            return null;
        }

    }

    public String getIsoCode() {
        return isoCode;
    }
}
